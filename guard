#!/bin/bash
#C. Junghans
#This script was motivated by Thomas Kahle (www.pi-ist-genau-3.de)
#who has a guard script of his friend Georg, which was much to 
#complicated for me !

#version 0.9.0  19.09.07 -- added --xpdf
#version 0.1.0  10.10.07 -- allowing short opts
#version 0.1.1  18.10.07 -- remove string bug in short opts
#version 0.1.2  06.02.08 -- remove base name
#version 0.1.3  06.03.08 -- add --self
#version 0.1.4  16.04.08 -- better version system
#version 0.2.0  04.06.12 -- major clean up
#version 0.3.0  17.12.14 -- using inotifywait if available

usage="Usage: ${0##*/} file1 <file2> ..."
cmd="make"
quiet=
waittime=3
cksum=
self=
r=

die() {
  echo -e "$*" >&2
  exit 1
}

help () {
  cat << eof
Run a command if file is changed
$usage
OPTIONS:
-e, --exec COMMAND  Run the command COMMAND
                    Default: $cmd
-t, --time SEC      Wait SEC secs until run command
                    Default: $waittime
-c, --cksum CMD     Force use CMD as checksum program
		    Default: sha1sum (if inotifywait not found)
-s, --self          Add first file to command
-q, --quiet         Be a little bit quiet
-h, --help          Show this help
-v, --version       Show version

Examples:  ${0##*/} bla.tex
           ${0##*/} -e "make -f other_makefile" some_file
           ${0##*/} -e "povray +A -W800 -H600 file.pov" file.pov

Send bugs and comment to junghans@votca.org
eof
}

shopt -s extglob
while [[ ${1} = -?* ]]; do
  if [[ ${1} = --??*=* ]]; then # case --xx=yy
    set -- "${1%%=*}" "${1#*=}" "${@:2}" # --xx=yy to --xx yy
  elif [[ ${1} = -[^-]?* ]]; then # case -xy split
    if [[ ${1} = -[cet]* ]]; then #short opts with arguments
       set -- "${1:0:2}" "${1:2}" "${@:2}" # -xy to -x y
    else #short opts without arguments
       set -- "${1:0:2}" "-${1:2}" "${@:2}" # -xy to -x -y
    fi
  fi
 case "$1" in 
   -e | --exec)
    cmd=$2
    shift 2;;
   -t | --time)
    waittime="$2"
    [[ $waittime -gt 0 ]] || die "Argument of -t should be int and bigger than 0"
    shift 2;;
   -c | --checksum)
    cksum="$2"
    [[ $(type -p $cksum) ]] || die "$cksum not found"
    shift 2;;
   -q | --quiet)
    quiet="yes"
    shift ;;
   -s | --self)
    self="yes"
    shift ;;
   -h | --help)
    help
    exit 0;;
   --hg)
    echo "${0##*/}: $(sed -ne 's/^#version.* -- \(.*$\)/\1/p' $0 | sed -n '$p')"
    exit 0;;
   -v | --version)
    echo "${0##*/}", $(sed -ne 's/^#\(version.*\) -- .*$/\1/p' $0 | sed -n '$p') by C. Junghans
    exit 0;;
  *)
   die "Unknown option '$1'"
   shift ;;
  --)
   shift
   break ;;
 esac
done

[[ -z $1 ]] && die "No file given !\n$usage\nHelp with -h"

if [[ ! $cksum && $(type -p inotifywait) ]]; then 
  echo "Using inotifywait instead of checksums"
else
  : ${cksum:=sha1sum}
  echo "Using $cksum for checksums"
fi

for f in "$@"; do
  if [[ ! -f $f ]] ; then 
    [[ $cksum ]] && die "$f not found or readable or not a file"
    #inotifywait supports dirs
    [[ -d $f ]] || die "$f not found"
    r=-r
  fi
  [[ $cksum ]] && checksum[${#filename[@]}]=$($cksum $f)
  filename[${#filename[@]}]=$f
done

echo "Guarding files ${filename[@]}"
echo "for doing '$cmd' every $waittime secs"

$cmd ${self:+$1}

echo ${0##*/} is waiting...  
while true; do
  [[ $quiet ]] && echo "${0##*/} is waiting..."
  run=
  if [[ $cksum ]]; then
    sleep $waittime
    for (( i=0;i<${#filename[@]};i++)); do
      newchecksum=$($cksum ${filename[$i]})
      if [[ $newchecksum != ${checksum[$i]} ]]; then
        echo "'${filename[$i]}' has changed!"
        checksum[$i]=$newchecksum
        run="yes"
      fi
    done
  else
    #vim does a move_self which makes files disappear for a sec
    for f in "${filename[@]}"; do
      while [[ ! -f $f && ! -d $f ]]; do :; done
    done # 
    inotifywait $r ${quiet:+-q} -e modify,move_self,create "${filename[@]}"
    run=yes
  fi
  if [[ $run ]]; then
    $cmd ${self:+$1}
    echo ${0##*/} is waiting...
  fi
done
